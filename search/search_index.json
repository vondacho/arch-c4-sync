{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"arch-c4-sync","text":"<p>A Kotlin project for synchronizing several corporate C4-compliant Structurizr models including the publishing  to a C4 documentation hub hosted on Structurizr cloud for 3D-visualization.</p> <p>This software architectural documentation engine proposes to gather the information elements related to the different layers of the C4 model for one corporate system, and then publish them on a corporate Structurizr Cloud account for visualization.</p> <p>Concretely, the C4 data elements with their relationships come from manual input and automatic search operations. For example, the product owners are responsible for the maintenance of layers C1 (context) and C2 (business containers); network infrastructure tools are automatically queried to harvest the C2 containers with their interactions; code scanners are used to extract the C3 components.</p> <p>The production of this living documentation is orchestrated by a pipeline triggered periodically or upon human intervention by means of a pull request.</p> <p>The scheduling of human intervention is managed by a process.</p>"},{"location":"#getting-started","title":"Getting started","text":"<ul> <li>To build the project with <code>gradle jar</code></li> <li>To create your private free account on Structurizr</li> </ul>"},{"location":"architecture/","title":"Architecture","text":""},{"location":"architecture/#context","title":"Context","text":"<ul> <li>C4 system view</li> <li>C4 containers view</li> </ul>"},{"location":"architecture/#micro-design","title":"Micro design","text":""},{"location":"architecture/#clean-architecture","title":"Clean architecture","text":"<p>The logical layers are organized like an onion.</p> <ul> <li>appl (application logic, orchestration of the use cases, transactional): <code>- uses -&gt;</code> domain</li> <li>domain (Domain model composed of core entities and core logic)</li> <li>external (External systems models and adapters) <code>- imports -&gt;</code> appl, domain</li> </ul>"},{"location":"architecture/#domain-model","title":"Domain model","text":""},{"location":"architecture/#implementation","title":"Implementation","text":""},{"location":"architecture/#stacks-libraries-frameworks","title":"Stacks, libraries, frameworks","text":"<ul> <li>Kotlin 1.8.x</li> <li>Gradle 7.5</li> <li>Allure</li> <li>Structurizr</li> </ul>"},{"location":"architecture/#deployment","title":"Deployment","text":"<p>Github packages</p>"},{"location":"architecture/#cicd","title":"CICD","text":"<p>Github actions</p>"},{"location":"requirements/","title":"Requirements","text":"<p>Arch-c4-sync component is exppected to provide the following behaviors.</p>"},{"location":"requirements/#functional","title":"Functional","text":"<ul> <li>To download a remote Structurizr C4 model.</li> <li>To load a Structurizr C4 model from a local Structurizr DSL file.</li> <li>To load a Structurizr C4 model from a local coporate infrastucture DSL file.</li> <li>To merge several Structurizr C4 models.</li> <li>To upload a Structurizr C4 model to a Structurizr cloud account.</li> </ul>"},{"location":"requirements/#non-functional","title":"Non-functional","text":"<ul> <li>To provide an executable artefact in a Docker containerized way.</li> </ul>"},{"location":"testing/","title":"Testing","text":""},{"location":"testing/#getting-started","title":"Getting started","text":"<p>To build the project reports with <code>gradlew clean test allureReport</code></p>"},{"location":"testing/#acceptance-testing","title":"Acceptance testing","text":""},{"location":"testing/#xunit-testing","title":"xUnit testing","text":"<p>Reporting with Allure</p>"},{"location":"usecases/","title":"Use cases","text":""},{"location":"usecases/#simple-dsl-read","title":"Simple DSL read","text":"<p>To read a C4-model from a local file. As a result, the JSON representation of the model get printed in the console.</p> <ul> <li>Describe your C4-model into a model file.<ul> <li>using Structurizr-DSL format</li> <li>using Structurizr-JSON format</li> </ul> </li> <li>Example <code>java -cp build/libs/arch-c4-sync.jar edu.obya.c4.appl.ReadAppKt doc/c4/dsl/sample.dsl</code></li> </ul>"},{"location":"usecases/#simple-dsl-upload","title":"Simple DSL upload","text":"<p>To publish a C4-model file to a Structurizr cloud account. As a result, the remote C4-model can be visualized online on the Structurizr website.</p> <ul> <li>Retrieve the ID of your private Structurizr Workspace with your credentials (API-key, API-secret).</li> <li>Describe your C4-model into a model file.<ul> <li>using Structurizr-DSL format</li> <li>using Structurizr-JSON format</li> </ul> </li> <li>Example <code>java -cp build/libs/arch-c4-sync.jar edu.obya.c4.appl.UploadAppKt doc/c4/dsl/sample.dsl &lt;workspace-id&gt; &lt;api-key&gt; &lt;api-secret&gt;</code></li> <li>Visualize your C4-model online on Structurizr</li> </ul>"},{"location":"usecases/#simple-download","title":"Simple download","text":"<p>To download a remote C4-model from a Structurizr cloud account. As a result, the JSON representation of the model get printed in the console.</p> <ul> <li>Retrieve the ID of your private Structurizr Workspace with your credentials (API-key, API-secret).</li> <li>Execute <code>java -cp build/libs/arch-c4-sync.jar edu.obya.c4.appl.DownloadAppKt &lt;workspace-id&gt; &lt;api-key&gt; &lt;api-secret&gt;</code></li> </ul>"},{"location":"usecases/#synchronization","title":"Synchronization","text":"<p>To synchronize a remote C4-model hosted in a Structurizr cloud account with a local C4-model.</p> <ul> <li>Retrieve the ID of your private Structurizr Workspace with your credentials (API-key, API-secret).</li> <li>Describe your local C4-model into a model file.<ul> <li>using Structurizr-DSL format</li> <li>using Structurizr-JSON format</li> </ul> </li> <li>Example <code>java -jar build/libs/arch-c4-sync.jar -download &lt;workspace-id&gt; &lt;api-key&gt; &lt;api-secret&gt; -dsl doc/c4/dsl/sample.dsl -upload</code></li> <li>Visualize your remote C4-model online on Structurizr</li> </ul>"},{"location":"usecases/#options","title":"Options","text":"<ul> <li>-download <code>&lt;workspace-id&gt; &lt;api-key&gt; &lt;api-secret&gt;</code> downloads a C4-model from a remote Structurizr workspace</li> <li>-upload <code>[&lt;workspace-id&gt; &lt;api-key&gt; &lt;api-secret&gt;]</code> uploads the resulting C4-model to a remote Structurizr workspace</li> <li>-dsl <code>&lt;list of paths&gt;</code> activates the scanning of C4-model out of json or dsl files</li> <li>-metadata <code>&lt;list of paths&gt;</code> activates the scanning of C4-model out of <code>metatada.yaml</code> files</li> <li>-naming <code>&lt;path&gt;</code> replaces the default naming file by the given one</li> <li>-viewcount <code>&lt;max count&gt;</code> limits the number of views inside the resulting C4-model</li> <li>-viewfilter <code>&lt;list of keys&gt;</code> filters the views inside the resulting C4-model</li> <li>-broker imports queues and exchanges from main broker</li> <li>-relationshipinfer infers not specified relationships</li> <li>-viewgen <code>[&lt;list of views&gt;]</code> generates a set of standard views if these do no exist`<ul> <li><code>landscape|system|services|service|ownership|components|deployment</code></li> </ul> </li> <li>-viewenrich add some external context to container and component views</li> <li>-viewclean remove some out of focus elements from container and component views</li> <li>-sitegen generates a website composed of standard web cards if these do no exist</li> </ul>"},{"location":"usecases/#with-docker","title":"With Docker","text":"<pre><code>docker run -v `pwd`:`pwd` -w `pwd` ghcr.io/vondacho/arch-c4-sync c4-sync -download &lt;workspace-id&gt; &lt;api-key&gt; &lt;api-secret&gt; -print\ndocker run -v `pwd`:`pwd` -w `pwd` ghcr.io/vondacho/arch-c4-sync c4-sync -download &lt;workspace-id&gt; &lt;api-key&gt; &lt;api-secret&gt; -dsl doc/c4/dsl -metadata metadata.yaml -broker -relationshipinfer -viewgen service -viewenrich -viewclean -upload\ndocker run -v `pwd`:`pwd` -w `pwd` ghcr.io/vondacho/arch-c4-sync c4-sync-default &lt;workspace-id&gt; &lt;api-key&gt; &lt;api-secret&gt;\n</code></pre>"},{"location":"usecases/#contribute-to-documentation-hub","title":"Contribute to documentation hub","text":"<ul> <li>Contribute</li> <li>Create diagrams using DSL</li> <li>Create diagrams using Editor</li> </ul>"},{"location":"usecases/#ci-pipeline-use","title":"CI pipeline use","text":"<p>Every project is a contributor from its local <code>doc/c4/dsl</code> directory.</p> <pre><code>#!groovy\n\nnode('default') {\n    stage(\"Checkout\") {\n        checkout scm\n    }\n    stage(\"C4\") {\n        docker.withRegistry(\"https://ghcr.io\") {\n            withCredentials([usernamePassword(\n                credentialsId: 'structurizr_username',\n                usernameVariable: 'structurizr_api_key',\n                passwordVariable: 'structurizr_api_secret')]) {\n\n                docker.image(\"ghcr.io/vondacho/arch-c4-sync:latest\").inside {\n                    sh \"c4-sync-default 38199 ${structurizr_api_key} ${structurizr_api_secret}\"\n                }\n            }\n        }\n    }\n}\n</code></pre>"}]}